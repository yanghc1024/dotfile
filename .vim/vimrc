" ======================================================
" 	Plugins	
" ======================================================
call plug#begin('~/.vim/plugged')

Plug 'morhetz/gruvbox'
Plug 'jiangmiao/auto-pairs'
Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'voldikss/vim-floaterm'

Plug 'ludovicchabant/vim-gutentags'
Plug 'lervag/vimtex'

Plug 'neoclide/coc.nvim', {'branch': 'release'}


call plug#end()


" ======================================================
" 	Settings
" ======================================================

set nocompatible
set number relativenumber
set cursorline
set ignorecase smartcase
set showmatch
set history=500
set encoding=UTF-8
set showmode
set showcmd

set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set clipboard=unnamed

syntax on
filetype on
filetype plugin on
filetype indent on

let mapleader=","

inoremap jj <Esc>

nnoremap Q :bd<cr>
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

nnoremap <leader>ev :e $MYVIMRC <cr>
nnoremap <leader>sv :source $MYVIMRC <cr>

set termguicolors
set background=dark
colorscheme gruvbox

" ======================================================
" 	NERDTree
" ======================================================
nnoremap <C-n> :NERDTreeToggle<CR>

" ======================================================
" 	Gutentags
" ======================================================
set cscopeprg=gtags-cscope
let $GTAGSLABEL = 'native-pygments'
let $GTAGSCONF = expand('~/.globalrc')
let g:gutentags_enabled = 1
let g:gutentags_project_root = [ '.root', '.git', '.svn', '.project' ]
let g:gutentags_modules = []
if executable('ctags')
    let g:gutentags_modules += [ 'ctags' ]
endif
if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += [ 'gtags_cscope' ]
endif
let g:gutentags_ctags_tagfile = '.tags'
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags)
	silent! call mkdir(s:vim_tags, 'p')
endif

let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

let g:gutentags_auto_add_gtags_cscope = 0
let g:gutentags_define_advanced_commands = 1

" ======================================================
" 	Vimtex
" ======================================================
let g:tex_flavor = 'latex'
let g:vimtex_view_method = 'zathura'
let maplocalleader = ','

let g:vimtex_compiler_method = 'latexmk'
let g:vimtex_compiler_latexmk = {
    \ 'executable': 'latexmk',
    \ 'options': [
    \   '-pdf',
    \   '-file-line-error',
    \   '-synctex=1',
    \   '-interaction=nonstopmode',
    \   '-shell-escape'
    \ ],
    \}


" ======================================================
" 	Floaterm
" ======================================================
nnoremap <leader>ft :FloatermNew<cr>
nnoremap <leader>fn :FloatermNext<cr>
nnoremap <leader>fp :FloatermPrev<cr>


" ======================================================
" 	Coc
" ======================================================
set updatetime=300
set signcolumn=yes

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)


" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
